{"version":3,"sources":["firebase.js","todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","prop","useState","open","setopen","input","setInput","React","modalStyle","classes","handleClose","className","List","ListItemAvatar","ListItemText","primary","todo","Button","variant","color","onClick","Modal","onClose","aria-labelledby","aria-describedby","style","id","FormControl","InputLabel","Input","value","onChange","event","target","collection","doc","update","evet","delete","useEffect","App","todos","setTodos","setinput","addTodo","e","a","preventDefault","ref","set","timestamp","Date","getTime","orderBy","onSnapshot","docs","map","data","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e6fd7e0.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBQLrTzPdCEEwltsuEp_qtF3E3SzJrYZ1U\",\r\n  authDomain: \"newapp-c4334.firebaseapp.com\",\r\n  databaseURL: \"https://newapp-c4334.firebaseio.com\",\r\n  projectId: \"newapp-c4334\",\r\n  storageBucket: \"newapp-c4334.appspot.com\",\r\n  messagingSenderId: \"177664591914\",\r\n  appId: \"1:177664591914:web:92e58a0b43de0344331b53\",\r\n};\r\nconst app = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = app.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Input,\r\n  InputLabel,\r\n  Button,\r\n  FormControl,\r\n  List,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Modal,\r\n} from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Todo(prop) {\r\n  const [open, setopen] = useState(false);\r\n  const updateTodo = () => {\r\n    db.collection(\"todo\").doc(prop.todo.id).update({ todo: input });\r\n    handleClose();\r\n  };\r\n  const [input, setInput] = useState(\"\");\r\n  const handleOpen = () => {\r\n    setopen(true);\r\n  };\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const classes = useStyles();\r\n\r\n  const handleClose = () => {\r\n    setopen(false);\r\n  };\r\n  const del = (evet) => {\r\n    db.collection(\"todo\").doc(prop.todo.id).delete();\r\n  };\r\n  return (\r\n    <div className=\"todo\">\r\n      <List>\r\n        <ListItemAvatar></ListItemAvatar>\r\n        <ListItemText primary={prop.todo.todo}></ListItemText>\r\n      </List>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\r\n        Edit\r\n      </Button>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">Edit the Todos</h2>\r\n          <p id=\"simple-modal-description\">\r\n            <FormControl>\r\n              <InputLabel>{prop.todo.todo}</InputLabel>\r\n              <Input\r\n                value={input}\r\n                onChange={(event) => setInput(event.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Button onClick={updateTodo}>Update Todo</Button>\r\n          </p>\r\n        </div>\r\n      </Modal>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={del}>\r\n        Delete\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import { InputLabel, Button, FormControl, Input } from \"@material-ui/core\";\n\nimport React from \"react\";\nimport \"./App.css\";\nimport db from \"./firebase\";\nimport Todo from \"./todo\";\nconst { useState, useEffect } = React;\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setinput] = useState(\"\");\n  const addTodo = async (e) => {\n    e.preventDefault();\n    const ref = db.collection(\"todo\").doc();\n    ref.set({ id: ref.id, todo: input, timestamp: new Date().getTime() });\n    setTodos([...todos, input]);\n    setinput(\"\");\n  };\n  useEffect(() => {\n    db.collection(\"todo\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((a) => {\n        setTodos(a.docs.map((todo) => todo.data()));\n      });\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>Todo</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Enter your Todo</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setinput(event.target.value)}\n          />\n        </FormControl>\n        <Button disabled={!input} onClick={addTodo}>\n          Add todo\n        </Button>\n      </form>\n      <ul>\n        {todos.map((todo) => (\n          <Todo todo={todo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}